esphome:
  name: kurs-esp
  friendly_name: Kurs-ESP

esp8266:
  board: nodemcuv2

# Enable logging
logger:

web_server:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Kurs-Esp Fallback Hotspot"
    password: "G1FxXdKAXqYj"

captive_portal:

# I2C-Bus-Konfiguration
i2c:
  sda: D2
  scl: D1
  scan: true

sensor:
  - platform: dht
    pin: GPIO012
    temperature:
      name: "Living Room Temperature"
      id: temp
    humidity:
      name: "Living Room Humidity"
      id: humi
    update_interval: 10s

  - platform: mpu6050
    address: 0x68
    update_interval: 10s
    accel_x:
      name: "MPU6050 Accel X"
      id: mpu_accel_x
    accel_y:
      name: "MPU6050 Accel Y"
      id: mpu_accel_y
    accel_z:
      name: "MPU6050 Accel Z"
      id: mpu_accel_z
    gyro_x:
      name: "MPU6050 Gyro X"
      id: mpu_gyro_x
    gyro_y:
      name: "MPU6050 Gyro Y"
      id: mpu_gyro_y
    gyro_z:
      name: "MPU6050 Gyro Z"
      id: mpu_gyro_z

  - platform: template
    id: roll
    name: "pan1roll"
    accuracy_decimals: 2
    lambda: |-
      return (atan(id(mpu_accel_y).state / sqrt(pow(id(mpu_accel_x).state, 2) + pow(id(mpu_accel_z).state, 2))) * 180.0 / PI);
    update_interval: 250ms

#2,25° für Einbau
  - platform: template
    id: pitch
    name: "pan1pitch"
    accuracy_decimals: 2
    lambda: |-
      return (2.75+(atan(-1 * id(mpu_accel_x).state / sqrt(pow(id(mpu_accel_y).state, 2) + pow(id(mpu_accel_z).state, 2))) * 180.0 / PI)); 
    update_interval: 250ms

mqtt:
  broker: mon-facile-iot-stack.duckdns.org
  username: mosquitto
  password: !secret mqtt_password
 

interval:
  - interval: 10s
    then:
      - mqtt.publish_json:
          topic: "environment/d1_mini"
          payload: |-
            root["temp"] = id(temp).state;
            root["humi"] = id(humi).state;
            root["accel_x"] = id(mpu_accel_x).state;
            root["accel_y"] = id(mpu_accel_y).state;
            root["accel_z"] = id(mpu_accel_z).state;
            root["gyro_x"] = id(mpu_gyro_x).state;
            root["gyro_y"] = id(mpu_gyro_y).state;
            root["gyro_z"] = id(mpu_gyro_z).state;
            root["roll"] = id(roll).state;
            root["pitch"] = id(pitch).state;
      - logger.log:
          format: "[MQTT] --> Sending sensor values - temp: %.1f, humi: %.1f, accel_x: %.2f, accel_y: %.2f, accel_z: %.2f, gyro_x: %.2f, gyro_y: %.2f, gyro_z: %.2f, roll: %.2f, pitch: %.2f"
          args: [id(temp).state, id(humi).state, id(mpu_accel_x).state, id(mpu_accel_y).state, id(mpu_accel_z).state, id(mpu_gyro_x).state, id(mpu_gyro_y).state, id(mpu_gyro_z).state, id(roll).state, id(pitch).state]



